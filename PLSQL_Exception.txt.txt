SQL> show user
USER 為 "HR"

--compile error
SQL> BEGIN
  2   SELECT salary FROM employees WHERE last_name='King';
  3  END;
  4  /
 SELECT salary FROM employees WHERE last_name='King';
 *
 ERROR 在行 2:
ORA-06550: 第 2 行, 第 2 個欄位:
PLS-00428: 在此 SELECT 敘述句中預期會出現一個 INTO 子句

SQL> BEGIN
  2   SELECT salary INTO v_salary FROM employees WHERE last_name='King';
  3  END;
  4  /
 SELECT salary INTO v_salary FROM employees WHERE last_name='King';
                    *
 ERROR 在行 2:
ORA-06550: 第 2 行, 第 21 個欄位:
PLS-00201: 必須宣告識別項 'V_SALARY'
ORA-06550: 第 2 行, 第 30 個欄位:
PL/SQL: ORA-00904: : 無效的 ID
ORA-06550: 第 2 行, 第 2 個欄位:
PL/SQL: SQL Statement ignored

--Run time error
SQL> DECLARE
  2   v_salary VARCHAR2(1);
  3  BEGIN
  4   SELECT salary INTO v_salary FROM employees WHERE last_name='King';
  5  END;
  6  /
DECLARE
*
 ERROR 在行 1:
ORA-01422: 精確擷取傳回的列數超過所要求的列數     --TOO_MANY_ROWS(例外名稱)
ORA-06512: 在 line 4


SQL> select salary from hr.emp where last_name='King';

    SALARY
----------
     24000
     10000

SQL> DECLARE
  2   v_salary VARCHAR2(1);
  3  BEGIN
  4   SELECT salary INTO v_salary FROM employees WHERE employee_id=100;
  5  END;
  6  /
DECLARE
*
 ERROR 在行 1:
ORA-06502: PL/SQL: 數字或值錯誤: 字元字串緩衝區太小     --24000 -> v_salary(varchar2(1)) => '24000' -> v_salary
ORA-06512: 在 line 4
	 
SQL> DECLARE
  2   v_salary VARCHAR2(5);
  3  BEGIN
  4   SELECT salary INTO v_salary FROM employees WHERE employee_id=100;
  5  END;
  6  /

已順利完成 PL/SQL 程序.	   --真的沒有錯?

SQL> desc employees
 名稱                                      空值?    類型
 ----------------------------------------- -------- ----------------------------
 EMPLOYEE_ID                               NOT NULL NUMBER(6)
 FIRST_NAME                                         VARCHAR2(20)
 LAST_NAME                                 NOT NULL VARCHAR2(25)
 EMAIL                                     NOT NULL VARCHAR2(25)
 PHONE_NUMBER                                       VARCHAR2(20)
 HIRE_DATE                                 NOT NULL DATE
 JOB_ID                                    NOT NULL VARCHAR2(10)
 SALARY                                             NUMBER(8,2)    --此處為數值型態
 COMMISSION_PCT                                     NUMBER(2,2)
 MANAGER_ID                                         NUMBER(6)
 DEPARTMENT_ID                                      NUMBER(4)
 
SQL> DECLARE
  2   v_salary VARCHAR2(5);
  3  BEGIN
  4   SELECT salary INTO v_salary FROM employees WHERE employee_id=1000;
  5  END;
  6  /
DECLARE
*
 ERROR 在行 1:
ORA-01403: 找不到資料  --因為沒有使用explicit cursor,所以預期implicit cursor將回傳1筆 row
ORA-06512: 在 line 4
 
--解決方案
1.使用explicit cursor
2.確定select指令只會回傳一筆記錄(一定只有一筆,不能為0筆或多筆)->implicit cursor

SQL> declare
  2   v_lname varchar2(25);
  3  begin
  4   select last_name into lname from hr.emp where last_name='King';
  5   dbms_output.put_line(v_lname);
  6  EXCEPTION                --例外處理區由EXCEPTION開始到END為止
  7   WHEN TOO_MANY_ROWS THEN  --捕捉例外時,必須使用EXCEPTION名字,但是PL/SQL出現錯誤時,是出現錯誤號碼.所以必須將錯誤號碼與EXCEPTION相連接.
  8     dbms_output.put_line('Your select statement retrieved multiple rows. Consider using a explicit cursor.');
  9  end;
 10  /
Your select statement retrieved multiple rows. Consider using a explicit cursor.

已順利完成 PL/SQL 程序.

SQL> declare
  2   v_lname varchar2(25);
  3  begin
  4   select last_name into v_lname from hr.emp where last_name='Frank';
  5   dbms_output.put_line(v_lname);
  6  EXCEPTION
  7   WHEN TOO_MANY_ROWS THEN
  8     dbms_output.put_line('Your select statement retrieved multiple rows. Consider using a cursor.');
  9  end;
 10  /
declare
*
 ERROR 在行 1:
ORA-01403: 找不到資料   --因為出現的錯誤並沒有在EXCEPTION被捕捉到,所以傳遞到呼叫此PL/SQL BLOCK的環境(SQLPLUS)
ORA-06512: 在 line 4 

SQL> declare
  2   v_lname varchar2(25);
  3  begin
  4   select last_name into v_lname from hr.emp where last_name='Frank';
  5   dbms_output.put_line(v_lname);
  6  EXCEPTION
  7   WHEN TOO_MANY_ROWS OR USERENV_COMMITSCN_ERROR THEN  --可以讓多個exceptions使用相同的例外處理
  8     dbms_output.put_line('Your select statement retrieved multiple rows. Consider using a cursor.');
  9   WHEN NO_DATA_FOUND THEN
 10     dbms_output.put_line('Your select statement retrieved no row. Consider another conditions.');
 11  end;
 12  /
Your select statement retrieved no row. Consider another conditions.

已順利完成 PL/SQL 程序.

--事先定義的例外名字,有錯誤號碼與例外名字的對應存在
--放在Package:STANDARD的定義裡,相關檔案應該在$ORACLE_HOME/rdbms/admin/stdspec.sql
                                             $ORACLE_HOME/rdbms/admin/stdbody.sql
--目前在Windows 10所安裝的Oracle Software其ORACLE_HOME=C:\app\oracle\product\12.2.0\dbhome_1
  /********** Predefined exceptions **********/

  CURSOR_ALREADY_OPEN exception;
    pragma EXCEPTION_INIT(CURSOR_ALREADY_OPEN, '-6511');

  DUP_VAL_ON_INDEX exception;
    pragma EXCEPTION_INIT(DUP_VAL_ON_INDEX, '-0001');

  TIMEOUT_ON_RESOURCE exception;
    pragma EXCEPTION_INIT(TIMEOUT_ON_RESOURCE, '-0051');

  INVALID_CURSOR exception;
    pragma EXCEPTION_INIT(INVALID_CURSOR, '-1001');

  NOT_LOGGED_ON exception;
    pragma EXCEPTION_INIT(NOT_LOGGED_ON, '-1012');

  LOGIN_DENIED exception;
    pragma EXCEPTION_INIT(LOGIN_DENIED, '-1017');

  NO_DATA_FOUND exception;
    pragma EXCEPTION_INIT(NO_DATA_FOUND, 100);

  ZERO_DIVIDE exception;
    pragma EXCEPTION_INIT(ZERO_DIVIDE, '-1476');

  INVALID_NUMBER exception;
    pragma EXCEPTION_INIT(INVALID_NUMBER, '-1722');

  TOO_MANY_ROWS exception;
    pragma EXCEPTION_INIT(TOO_MANY_ROWS, '-1422');

  STORAGE_ERROR exception;
    pragma EXCEPTION_INIT(STORAGE_ERROR, '-6500');

  PROGRAM_ERROR exception;
    pragma EXCEPTION_INIT(PROGRAM_ERROR, '-6501');

  VALUE_ERROR exception;
    pragma EXCEPTION_INIT(VALUE_ERROR, '-6502');

  ACCESS_INTO_NULL exception;
    pragma EXCEPTION_INIT(ACCESS_INTO_NULL, '-6530');

  COLLECTION_IS_NULL exception;
    pragma EXCEPTION_INIT(COLLECTION_IS_NULL , '-6531');

  SUBSCRIPT_OUTSIDE_LIMIT exception;
    pragma EXCEPTION_INIT(SUBSCRIPT_OUTSIDE_LIMIT,'-6532');

  SUBSCRIPT_BEYOND_COUNT exception;
    pragma EXCEPTION_INIT(SUBSCRIPT_BEYOND_COUNT ,'-6533');

  -- exception for ref cursors
  ROWTYPE_MISMATCH exception;
  pragma EXCEPTION_INIT(ROWTYPE_MISMATCH, '-6504');

  SYS_INVALID_ROWID  EXCEPTION;
  PRAGMA EXCEPTION_INIT(SYS_INVALID_ROWID, '-1410');

  -- The object instance i.e. SELF is null
  SELF_IS_NULL exception;
    pragma EXCEPTION_INIT(SELF_IS_NULL, '-30625');

  CASE_NOT_FOUND exception;
    pragma EXCEPTION_INIT(CASE_NOT_FOUND, '-6592');

  -- Added for USERENV enhancement, bug 1622213.
  USERENV_COMMITSCN_ERROR exception;
    pragma EXCEPTION_INIT(USERENV_COMMITSCN_ERROR, '-1725');

  -- Parallel and pipelined support
  NO_DATA_NEEDED exception;
    pragma EXCEPTION_INIT(NO_DATA_NEEDED, '-6548');
  -- End of 8.2 parallel and pipelined support

SQL> delete hr.departments where department_id=90;
delete hr.departments where department_id=90
*
 ERROR 在行 1:
ORA-02292: 違反整合性限制條件 (HR.EMP_DEPT_FK) - 發現子項記錄--違反Foreign Key限制

--定義EXCEPTION,將錯誤號碼與自行宣告的例外名字相連接
SQL> declare
  2   child_record_found EXCEPTION;   --宣告一個例外名字
  3   PRAGMA EXCEPTION_INIT(child_record_found,-2292);  --連接錯誤號碼與例外名字
  4  begin                                     -----請注意錯誤號碼是數字(負)
  5   delete hr.departments where department_id=90;
  6  EXCEPTION
  7   WHEN child_record_found THEN
  8    dbms_output.put_line('Child Record Still exists');
  9  end;
 10  /
Child Record Still exists

已順利完成 PL/SQL 程序.

SQL> drop table hr.t2;
SQL> create table hr.t2 (a number primary key);  --PK限制為unique+not null

SQL> insert into hr.t2 values(null);
insert into hr.t2 values(null)
                         *
 ERROR 在行 1:
ORA-01400: 無法將 NULL 插入 ("HR"."T2"."A")

SQL> begin
  2   insert into hr.t2 values(null);
  3  EXCEPTION
  4   WHEN OTHERS THEN   --任何錯誤都可以被捕捉
  5    dbms_output.put_line(SQLERRM);   --SQLERRM這個函數,將可以顯示最後一次所發生的Oracle Error Message
  6    dbms_output.put_line(SQLCODE);   --SQLERRM這個函數,將可以顯示最後一次所發生的Oracle Error Code
  7  end;
  8  /
ORA-01400: 無法將 NULL 插入 ("HR"."T2"."A")
-1400

已順利完成 PL/SQL 程序.

SQL> begin
  2   dbms_output.put_line(sqlerrm);
  3  end;
  4  /
ORA-0000: normal, successful completion

已順利完成 PL/SQL 程序.

SQL> begin
  2   dbms_output.put_line(sqlerrm(-1555));
  3  end;
  4
  5  /
ORA-01555: 快照太舊 : 倒回區段編號 , 名稱為 "" 過小

已順利完成 PL/SQL 程序.

--將SQLERRM/SQLCODE儲存在某個table裡
SQL> create table run_time_errs (error_time date,run_time_error_message varchar2(4000));

已建立表格.

SQL> declare
  2   v_sqlerrm varchar2(4000);
  3  begin
  4   insert into hr.t2 values(null);
  5  exception
  6   when OTHERS
  7    then
  8     rollback;  --可選用.但建議,因為下方有commit操作(確認exception logging成功)
  9     dbms_output.put_line('Something Wrong, please contact Frank');
 10     v_sqlerrm := SQLERRM;
 11     insert into run_time_errs values(sysdate,v_sqlerrm);
 12     commit;
 13  end;
 14  /
Something Wrong, please contact Frank

已順利完成 PL/SQL 程序.

SQL> select run_time_error_message from run_time_errs ;

RUN_TIME_ERROR_MESSAGE
--------------------------------------------------------------------------------
ORA-01400: 無法將 NULL 插入 ("HR"."T2"."A")

--將新發現的錯誤,變成例外.
SQL> declare
  2   insert_null_except exception;
  3   pragma exception_init(insert_null_except,-1400);
  4  begin
  5   insert into hr.t2 values(null);
  6  exception
  7   when others then
  8     dbms_output.put_line(SQLERRM);
  9   when insert_null_except then
 10     dbms_output.put_line('Can''t insert null value');
 11  end;
 12  /
 when others then
 *
 ERROR 在行 4:
ORA-06550: 第 4 行, 第 2 個欄位:
PLS-00370: OTHERS 處理程式必須為區塊中的最後一個例外處理程式
ORA-06550: 第 0 行, 第 0 個欄位:
PL/SQL: Compilation unit analysis terminated


SQL> declare
  2   insert_null_except exception;
  3   pragma exception_init(insert_null_except,-1400);
  4  begin
  5   insert into hr.t2 values(null);
  6  exception
  7   when insert_null_except then
  8     dbms_output.put_line('Can''t insert null value');
  9   when others then
 10     dbms_output.put_line(SQLERRM);
 11  end;
 12  /
Can't insert null value

已順利完成 PL/SQL 程序.

SQL> declare
  2   v_salary number;
  3  begin
  4   select salary into v_salary from hr.emp where last_name='FRANK';
  5   dbms_output.put_line('FRANK:'||v_salary);
  6  exception
  7   when others then
  8    dbms_output.put_line(SQLERRM);
  9    dbms_output.put_line(SQLCODE);
 10  end;
 11  /
ORA-01403: 找不到資料
100   --只有NO_DATA_FOUND的錯誤號碼為100(正數),其他錯誤號碼都是負數

已順利完成 PL/SQL 程序.

SQL> select salary from hr.emp where department_id=90;

    SALARY
----------
     24000
     17000
     17000

SQL> declare
  2   v_salary number;
  3  begin
  4   select salary into v_salary from hr.emp where employee_id=100;
  5   if v_salary >= 20000 then
  6    dbms_output.put_line('Can''t Display Salary more than 20000');
  7   else
  8    dbms_output.put_line(v_salary);
  9   end if;
 11   dbms_output.put_line('Hello!!!!!');
 12  end;
 13  /
Can't Display Salary more than 20000
Hello!!!!!

已順利完成 PL/SQL 程序.

SQL> declare
  2   v_salary number;
  3   over_privilege exception;
  4  begin
  5   select salary into v_salary from hr.emp where employee_id=100;
  6   if v_salary >= 20000 then
  7     raise over_privilege;  --人為發出錯誤,但Oracle Server並沒有任何錯誤.,直接跳到EXCEPTION區塊
  8   else
  9    dbms_output.put_line(v_salary);
 10   end if;
 11   dbms_output.put_line('Hello!!!!!');
 12  exception
 13   when over_privilege then
 14    dbms_output.put_line('Can''t Display Salary more than 20000');
 15 end;
 16  /
Can't Display Salary more than 30000
              --line 11並沒有被執行,因為line 7發出錯誤後,就跳到line 12例外處理區進行操作.例外處理完成後跳到end結束此PL/SQL Block.
已順利完成 PL/SQL 程序.

--Nested BLOCK
SQL> declare
  2   e_user_exception1 exception;
  3  begin
  4   dbms_output.put_line('Hello World1');
  5   declare                                       --Line 5-9為Nested Block
  6    e_user_exception2 exception;
  7   begin
  8    dbms_output.put_line('Hello World2');
  9   end;
 10   dbms_output.put_line('Hello World3');
 11  exception
 12   when e_user_exception1 then
 13    dbms_output.put_line('User Raise Exception1');
 14   when others then
 15    dbms_output.put_line('Something was happend,but i do not know which one');
 16  end;
 17  /
Hello World1
Hello World2
Hello World3

已順利完成 PL/SQL 程序.

SQL> declare
  2   e_user_exception1 exception;
  3  begin
  4   dbms_output.put_line('Hello World1');
  5   declare
  6    e_user_exception2 exception;
  7   begin
  8    dbms_output.put_line('Hello World2');
  9    raise e_user_exception2;    --發生user raise exception,但inner block並沒有捕捉此例外
 10   end;                         --所以此例外被傳遞到calling environment(outer block) -> line 12
 11   dbms_output.put_line('Hello World3');
 12  exception
 13   when e_user_exception1 then
 14    dbms_output.put_line('User Raise Exception1');
 15   when others then
 16    dbms_output.put_line('Something was happend,but i do not know which one');
 17  end;
 18  /
Hello World1   --line 4
Hello World2   --line 8
Something was happend,but i do not know which one  -->line 9->line 12->line 15->line 16

已順利完成 PL/SQL 程序.

SQL> declare
  2   e_user_exception1 exception;
  3  begin
  4   dbms_output.put_line('Hello World1');
  5   declare
  6    e_user_exception2 exception;
  7   begin
  8    dbms_output.put_line('Hello World2');
  9    raise e_user_exception2;
 10   exception
 11    when e_user_exception2 then
 12     dbms_output.put_line('User Raise Exception2');
 13   end;
 14   dbms_output.put_line('Hello World3');
 15  exception
 16   when e_user_exception1 then
 17    dbms_output.put_line('User Raise Exception1');
 18   when others then
 19    dbms_output.put_line('Something was happend,but i do not know which one');
 20  end;
 21  /
Hello World1   --line 4
Hello World2   --line 8
User Raise Exception2  --line 9->line 11->line 12
Hello World3   --line 14

已順利完成 PL/SQL 程序.

SQL> declare
  2   e_user_exception1 exception;
  3  begin
  4   dbms_output.put_line('Hello World1');
  5   declare
  6    e_user_exception2 exception;
  7   begin
  8    dbms_output.put_line('Hello World2');
  9    raise_application_error('-20201','User Raise Exception2 in inner block');  --自行發出的錯誤號碼必須在-20000到-20999之間
 10   end;
 11   dbms_output.put_line('Hello World3');
 12  exception
 13   when e_user_exception1 then
 14    dbms_output.put_line('User Raise Exception1');
 15   when others then
 16    dbms_output.put_line(SQLERRM);
 17  end;
 18  /
Hello World1
Hello World2
ORA-20201: User Raise Exception2 in inner block --line 9->line 12->line 15->line 16

已順利完成 PL/SQL 程序.

--根據前面所出現的例外,修改現有程式碼,明確地處理此例外

SQL> declare
  2   e_user_exception1 exception;
  3   e_user_exception2 exception;
  4   pragma exception_init(e_user_exception2,-20201);
  5  begin
  6   dbms_output.put_line('Hello World1');
  7   begin
  8    dbms_output.put_line('Hello World2');
  9    raise_application_error('-20201','User Raise Exception2 in inner block');
 10   end;
 11   dbms_output.put_line('Hello World3');
 12  exception
 13   when e_user_exception1 then
 14    dbms_output.put_line('User Raise Exception1');
 15   when e_user_exception2 then
 16    dbms_output.put_line('User Raise Exception2');
 17   when others then
 18    dbms_output.put_line(SQLERRM);
 19  end;
 20  /
Hello World1
Hello World2
User Raise Exception2

已順利完成 PL/SQL 程序.
SQL> create table hr.t3 (a number,b varchar2(10));

已建立表格.

SQL> insert into hr.t3 values(1,'A');

已建立 1 個資料列.

SQL> insert into hr.t3 values(2,'B');

已建立 1 個資料列.

SQL> commit;

確認完成.

SQL> select * from hr.t3;

         A B
---------- ----------
         1 A
         2 B


SQL> create or replace procedure update_t3(id number) is
  2  begin
  3   update hr.t3 set b='C' where a=id;
  4   if SQL%NOTFOUND THEN
  5    raise_application_error(-20100,'No Data Update');  --自行發出錯誤並設定錯誤號碼及錯誤訊息
  6   end if;　　　　　　　　　　　　　　　　　　　　　　 --錯誤號碼只能在-20000到-20999之間
  7  end;
  8  /

已建立程序.


SQL> begin
  2   update_t3(1);
  3   update_t3(4);
  4  end;
  5  /
begin
*
 ERROR 在行 1:
ORA-20100: No Data Update
ORA-06512: 在 "HR.UPDATE_T3", line 5
ORA-06512: 在 line 3


SQL> select * from hr.t3;

         A B
---------- ----------
         1 A
         2 B


SQL> declare
  2   no_data_update exception;
  3   pragma exception_init(no_data_update,-20100);
  4  begin
  5   update_t3(1);
  6   update_t3(4);
  7  exception
  8   when no_data_update then
  9    dbms_output.put_line('Some Update Failure');
 10  end;
 11  /
Some Update Failure

已順利完成 PL/SQL 程序.

SQL> select * from hr.t3;

         A B
---------- ----------
         1 C
         2 B

SQL> rollback;

倒回完成.

SQL> select * from hr.t3;

         A B
---------- ----------
         1 A
         2 B
		 
		 
SQL> declare
  2   v_sqlerrm varchar2(1000);
  3   v_sqlcode varchar2(10);
  4  begin
  5  declare
  6   v_lname varchar2(25);
  7   v_salary number;
  8   Over_privilege EXCEPTION;
  9   PRAGMA EXCEPTION_INIT(over_privilege,-20001);
 10  begin
 11   select last_name,salary into v_lname,v_salary from hr.emp where last_name='&Last_Name';
 12   if v_salary>15000 then
 13    raise_application_error('-20001','超過所授予的權限');
 14   end if;
 15   dbms_output.put_line('Last Name is '||v_lname);
 16  exception
 17   when TOO_MANY_ROWS
 18    then
 19     dbms_output.put_line('查詢條件有誤,有超過一筆以上資料滿足條件');
 20     raise_application_error('-20002','有問題1');
 21   when NO_DATA_FOUND
 22    then
 23     dbms_output.put_line('查詢條件有誤,沒有資料滿足條件');
 24   when OVER_PRIVILEGE
 25    then
 26     dbms_output.put_line('權限不足,無法顯示查詢結果');
 27  end;
 28  exception
 29   when others
 30    then
 31     rollback;
 32     dbms_output.put_line('Something Wrong');
 33     dbms_output.put_line('Please call 911');
 34     v_sqlcode := sqlcode;
 35     v_sqlerrm := sqlerrm;
 36     insert into ap1_errors values(sysdate,v_sqlcode,v_sqlerrm);
 37     commit;
 38  end;
 39 /
輸入 last_name 的值:  King
舊的   11:  select last_name,salary into v_lname,v_salary from hr.emp where last_name='&Last_Name';
新的   11:  select last_name,salary into v_lname,v_salary from hr.emp where last_name='King';
查詢條件有誤,有超過一筆以上資料滿足條件
Something Wrong
Please call 911

已順利完成 PL/SQL 程序.