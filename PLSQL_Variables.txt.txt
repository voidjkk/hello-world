PL/SQL->Oracle
Transact SQL->MSSQL
SQL PL->DB2

The lexical units of PL/SQL are its smallest individual components—delimiters,identifiers, literals, pragmas and comments.
                                                                   定義符號   辨識子       字面      編譯指示    註解
																   
A delimiter is a character, or character combination, that has a special meaning in PL/SQL.																   

Identifier(識別項)
Identifiers name PL/SQL elements, which include:
 Constants
 Cursors
 Exceptions
 Keywords
 Labels
 Packages
 Reserved words
 Subprograms
 Types
 Variables

Procedure Language extension for SQL(PL/SQL)->所以能用SQL做到的操作,就不該使用PL/SQL幫忙.

PL/SQL結構
DECLARE
 宣告區(所有在執行區與例外處理區所使用到的變數,都必須事先在此區進行宣告)
BEGIN
 執行區(SQL/PLSQL Statement)
EXCEPTION
 例外處理區(負責處理執行區所發生的例外:錯誤)
  --如果是宣告區或例外處理區發生錯誤,則將該錯誤傳遞到呼叫環境:calling Enviroment.
END; 

Anonymous PL/SQL Block->每次執行前,都需要進行編譯.
Procedure/Function->事先編譯一次並儲存在database,之後可以直接呼叫,被執行多次.


Variable的用途
1.暫時儲存資料
2.操作變數所儲存的資料
3.重複使用該變數

SQL> SET SERVEROUTPUT ON
SQL> BEGIN
  2   x := 10;
  3  END;
  4  /
 x := 10;
 *
 ERROR 在行 2:
ORA-06550: 第 2 行, 第 2 個欄位:
PLS-00201: 必須宣告識別項 'X'     --在執行區所使用到的任何辨識子,必須先在宣告區進行宣告.
ORA-06550: 第 2 行, 第 2 個欄位:
PL/SQL: Statement ignored

SQL> DECLARE
  2   x NUMBER;
  3  BEGIN
  4   x := 100;
  5   x := x+1;
  6   SELECT salary INTO x FROM hr.employees WHERE employee_id=x;
  7   dbms_output.put_line('X is '||x);
  8  END;
  9  /
X is 17000

已順利完成 PL/SQL 程序.

SQL> DECLARE
  2   x INTEGER;    --x的值,目前為空值.執行時將配置一塊記憶體空間給此變數.
  3  BEGIN
  4   DBMS_OUTPUT.PUT_LINE('The X''s value is ' || x);  --希望呈現的樣式為The X's value is 10
    --||的用途與SQL相同,用在將兩個文字連接在一起.
    --put_line用到文字時,必須使用單引號括起來. 文字(The X's value is) => 'The X's value is'(原本),但是此文字有一個'存在,將導致誤判.
    --所以要在文字裡的單引號前面,再加上一個單引號,用來告訴PL/SQL Engine,該單引號為單引號而已,沒有特殊含意.
	--             'The X''s value is'
	--建議使用q'!文字!'或q'+文字+'或q'|文字|'或q'a文字a'或q'(文字)'
    --q'!The X's value is!'
	
    -- :=出現時,首先進行:=的右手邊操作,然後將其結果賦予左手邊的變數
  5   x := x + 1;   --對空值進行任何數學運算,其結果都是空值
  6   DBMS_OUTPUT.PUT_LINE('The X''s value is '|| x);
  7   x := 1;  --賦值,x的值目前為1
  8   x := x + 1;  -- x+1=2,然後將2賦予x
  9   DBMS_OUTPUT.PUT_LINE('The X''s value is '|| x);
 10  END;
 11  /
The X's value is    --x為空值(line 4)
The X's value is    --x還是空值(line 6)
The X's value is 2  --line 9

已順利完成 PL/SQL 程序.


SQL> DECLARE
  2   x INTEGER := 1;  --宣告並且初始化
  3  BEGIN
  4   DBMS_OUTPUT.PUT_LINE('The X''s value is '|| x);
  5   x := x + 1;
  6   DBMS_OUTPUT.PUT_LINE('The X''s value is '|| x);
  7   x := 1;
  8   x := x + 1;
  9   DBMS_OUTPUT.PUT_LINE('The X''s value is '|| x);
 10  END;
 11  /
The X's value is 1   -->這裡的'是 X''中的第2個',第1個'是告訴Oracle,第2個'是一個literal.其用途為脫逸符號.
The X's value is 2
The X's value is 2

已順利完成 PL/SQL 程序.

SQL或PL/SQL裡,文字或日期型態的literal,必須被單引號包括起來.

SQL> BEGIN
  2   DBMS_OUTPUT.PUT_LINE('The X''s value is');
  3   DBMS_OUTPUT.PUT_LINE(q'!The X's value is!');  --!對!
  4   DBMS_OUTPUT.PUT_LINE(q'<The X's value is>');  --<對>或[對]或{對}
  5   DBMS_OUTPUT.PUT_LINE(q'#The X's value is#');  --#對#
  6  END;
  7  /
The X's value is
The X's value is
The X's value is
The X's value is

已順利完成 PL/SQL 程序.


SQL> DECLARE
  2   x NUMBER;y NUMBER;z NUMBER;  --不建議如此
  3  BEGIN
  4   x := 1;y := 2;z := 3;  --可以但不建議,因為可讀性
  5  END;
  6  /

已順利完成 PL/SQL 程序.

SQL> DECLARE
  2   變數1 NUMBER;
  3  BEGIN
  4   變數1 := 10;
  5   DBMS_OUTPUT.PUT_LINE(變數1);
  6  END;
  7  /
10

已順利完成 PL/SQL 程序.

SQL> SELECT employee_id FROM hr.employees WHERE last_name='Kochhar';

EMPLOYEE_ID
-----------
        101

SQL> DECLARE
  2   v_employee_id NUMBER;
  3  BEGIN
  4   SELECT employee_id FROM hr.employees WHERE last_name='Kochhar';
  5  END;
  6  /
 SELECT employee_id FROM hr.employees WHERE last_name='Kochhar';
 *
 ERROR 在行 4:
ORA-06550: 第 4 行, 第 2 個欄位:   --編譯階段發現錯誤,因為PL/SQL Engine知道這是一個SQL statement,所以預期將收到SQL Engine的回傳,此時應該要有INTO關鍵字
PLS-00428: 在此 SELECT 敘述句中預期會出現一個 INTO 子句


SQL> DECLARE
  2   v_employee_id NUMBER;   --不應該與table/column或其他關鍵字相同.
  3  BEGIN
  4   SELECT employee_id INTO v_employee_id FROM hr.employees WHERE last_name='Kochhar';  --into之後的v_employee_id是變數名字
       --PL/SQL Engine先將SELECT employee_id FROM hr.employees WHERE last_name='Kochhar'送到SQL Engine執行.
	   --SQL Engine執行完成後,回傳結果給PL/SQL Engine,PL/SQL Engine將101賦值給v_employee_id這個PL/SQL變數
  5   dbms_output.put_line('employee_id='||v_employee_id);
       --PL/SQL Engine執行dbms_output,顯示employee_id這個變數的值
  6  END;
  7  /
employee_id=101
已順利完成 PL/SQL 程序.

PL/SQL Name Resolution
If a SQL statement references a name that belongs to both a column and either a local variable or formal parameter,
 then the column name takes precedence.

SQL> DECLARE
  2   employee_id NUMBER(6);  --PL/SQL變數名稱與table/column name相同時,可能導致無法預期的錯誤出現.
  3   last_name VARCHAR2(30);
  4  BEGIN
  5   SELECT employee_id INTO employee_id  --employee_id(PL/SQL變數)=101,PL/SQL Engine傳送給SQL Engine的SQL Statement為
  6    FROM hr.employees                                                --SELECT employee_id FROM hr.employees ....
  7    WHERE last_name='Kochhar';
  8   dbms_output.put_line('employee_id='||employee_id);  --此時employee_id為PL/SQL variable
  9   SELECT last_name INTO last_name
 10    FROM hr.employees
 11    WHERE employee_id=employee_id;   --原本想像為WHERE employee_id=101,但實際上PL/SQL Engine當作WHERE employee_id=employee_id
 12   dbms_output.put_line('last_name='||last_name);
 13  END;
 14  /
employee_id=101 --line 8
declare
*
 ERROR 在行 1:
ORA-01422: 精確擷取傳回的列數超過所要求的列數  --執行階段出現錯誤,因為scalar variable一次只能儲存一個值,
ORA-06512: 在 line 9  --line 9-11的SQL指令卻回傳一筆以上的結果(107 rows)
                                           
變數的命名規則
1.英文字母開頭(中文字可)
2.可包含英數字,特殊符號僅能使用_,$,#(不區分大小寫)
3.不能超過30個character
4.不能使用保留字
5.建議不要與table/column相同名字
6.如果不想依照前面條件,可以使用雙引號將變數包括起來.但不建議如此.

--查詢此版本的所有保留字
SQL> select * from v$reserved_words;
KEYWORD
--------------------------------------------------------------------------------
SYSDG
DECLARE
LAG_DIFF_PERCENT
SETTINGS
NO_MONITORING
JSON_EXISTS
COMMIT
PASSWORD_REUSE_TIME
CONSTANT
APPEND
SYS_XQNODENAME
FRESH
EXTERNAL
MINING
FILTER
VIRTUAL

已選取 2350 個資料列.

SQL> DECLARE
  2   v1 NUMBER := 1;  --變數如果沒有被指初始值,其變數值將為NULL. 使用 := 指派初始值
  3   變數1 NUMBER := 2;   --初始值必須與變數相同型態
  4   "123" NUMBER := 3;   --若一定使用數字當作變數名稱(看起來),則需要使用雙引號將其包括起來.但不建議.
  5  BEGIN
  6   dbms_output.put_line(v1);
  7   dbms_output.put_line(變數1);
  8   dbms_output.put_line("123");  --使用此變數時,一定要加上雙引號
  9  END;
 10 /
1
2
3

已順利完成 PL/SQL 程序.

SQL> select 1+2,1||2,'1'+'2','1'||'2' from dual;

       1+2 1|    '1'+'2' '1
---------- -- ---------- --
         3 12          3 12
		 
出現在+左右邊的變數都應該是數字		 
出現在||左右邊的變數都應該是文字		 

1||2 => TO_CHAR(1)||TO_CHAR(2),只是TO_CHAR由oracle自動發生,所以稱為IMPLICT type conversion(隱式)
'1'+'2' => TO_NUMBER('1')+TO_NUMBER('2'),只是TO_NUMBER由oracle自動發生,所以稱為IMPLICT type conversion(隱式)

SQL> SELECT to_char(1)||to_char(2) FROM dual;   --明確使用to_char將數字/日期變成文字,稱為EXPLICIT type conversion(顯式)
 
TO
--
12

變數名稱可以加上v_或g_或c_或cur_等前綴字(prefix)
v_對應variable
c_對應constant
g_對應global variable(bind variable).此種變數是宣告在Calling Environment,而不是此PL/SQL Block裡.
cur_對應cursor variable
p_對應formal parameter

--宣告變數為CONSTANT(常數)時,必須在宣告時順便初始該變數.而且之後不能被變更其變數值.
SQL> DECLARE
  2   x NUMBER;          --x是變數,且目前為空值
  3   y CONSTANT NUMBER; --y是常數,且目前為空值.但常數不能為空值.
  4  BEGIN
  5   x := x+1;
  6   y := y+1;
  7  END;
  8  /
 y CONSTANT NUMBER;
 *
 ERROR 在行 3:
ORA-06550: 第 3 行, 第 2 個欄位:
PLS-00322: 常數 'Y' 的宣告必須包含一個初始化指定
ORA-06550: 第 3 行, 第 4 個欄位:
PL/SQL: Item ignored
ORA-06550: 第 6 行, 第 2 個欄位:
PLS-00363: 表示式 'Y' 無法作為指定目標使用
ORA-06550: 第 6 行, 第 2 個欄位:
PL/SQL: Statement ignored

SQL> DECLARE
  2   x NUMBER;
  3  -- y CONSTANT NUMBER;
  4   y CONSTANT NUMBER := 10;  --常數變數必須有初始值
  5  BEGIN
  6   x := x+1;
  7  -- y := y+1;  --常數變數不能變更其變數值
  8   x := y+1;
  9  END;
 10  /

已順利完成 PL/SQL 程序.

--當變數被宣告為不能為空值(NOT NULL)限制時,也必須在宣告同時進行初始化
SQL> DECLARE
  2   x NUMBER;  --x目前為空值
  3  BEGIN
  4   x := x+1;  --因為空值與任何數字進行運算,其結果永遠是空值.所以此運算式的結果為空值,然後將空值指派給x.
  5   dbms_output.put_line('-----------');
  6   dbms_output.put_line('X is '||x);    --所以顯示出來的x變數值為空值
  7   dbms_output.put_line('-----------');
  8  END;
  9  /
-----------
X is
-----------

已順利完成 PL/SQL 程序.

SQL> DECLARE
  2   x NUMBER NOT NULL := 0;  --x變數值目前為0
  3  BEGIN
  4   x := x+1;  --step 1=> 0+1=1, step 2=> x := 1(看起來,如果x 沒有NOT NULL限制)
                 --step 1=> 0+1=1, step 2=> check 1 is NOT NULL, step 3=>x := 1
  5   dbms_output.put_line('-----------');
  6   dbms_output.put_line('X is '||x);
  7   dbms_output.put_line('-----------');
  8  END;
  9  /
-----------
X is 1
-----------

已順利完成 PL/SQL 程序.
SQL> DECLARE
  2   x NUMBER NOT NULL;
  3  BEGIN
  4   x := x+1;
  5   dbms_output.put_line('-----------');
  6   dbms_output.put_line('X is '||x);
  7   dbms_output.put_line('-----------');
  8  END;
  9  /
 x NUMBER NOT NULL;
   *
 ERROR 在行 2:
ORA-06550: 第 2 行, 第 4 個欄位:
PLS-00218: 宣告為 NOT NULL 的變數必須要有初始化指定


SQL> DECLARE
  2   v_employee_id NUMBER;
  3  BEGIN
  4   SELECT employee_id into v_employee_id FROM hr.employees WHERE last_name='Kochhar';
  5   dbms_output.put_line('The Employee_id is '||v_employee_id);
  6  END;
  7  /
The Employee_id is 101

已順利完成 PL/SQL 程序.

SQL> CREATE OR REPLACE FUNCTION get_salary(p_empid IN NUMBER) RETURN NUMBER    --p_empid被稱為formal parameter(形式參數)
  2  IS
  3   v_salary HR.EMPLOYEES.SALARY%TYPE;
  4  BEGIN
  5   SELECT salary INTO v_salary FROM hr.employees WHERE employee_id=p_empid;
  6   RETURN v_salary;
  7  EXCEPTION
  8   WHEN OTHERS THEN
  9    return NULL;
 10  END;
 11  /

已建立函數.

SQL> DECLARE
  2   x NUMBER;
  3   y NUMBER;
  4  BEGIN
  5   x := 100;
  6   y := get_salary(x);   --變數x用來當作get_salary的輸入參數,變數y用來儲存get_salary的回傳值.x此時被稱為actual parameter(實際參數)
  7   dbms_output.put_line('Y is '||y);
  8  END;
  9  /
X is 24000

已順利完成 PL/SQL 程序.

SQL> desc nls_database_parameters
 名稱                                      空值?    類型
 ----------------------------------------- -------- ----------------------------
 PARAMETER                                          VARCHAR2(128)
 VALUE                                              VARCHAR2(64)

SQL> col parameter format a50
SQL> col value format a30
SQL> set linesize 110
SQL> select parameter,value from nls_database_parameters where parameter like '%CHARACTERSET';

PARAMETER                                          VALUE
-------------------------------------------------- ------------------------------
NLS_NCHAR_CHARACTERSET                             AL16UTF16                --national characterset
NLS_CHARACTERSET                                   ZHT16MSWIN950            --database characterset

CHAR,VARCHAR2,CLOB,LONG -> database characterset
NCHAR,NVARCHAR2,NCLOB -> national characterset


SQL> SELECT 'A',ascii('A') FROM dual;

' ASCII('A')
- ----------
A         65   --> Database store '1000001'

SQL> drop table t1;

已刪除表格.

SQL> create table t1(col1 int,col2 varchar2(10),col3 nvarchar2(10));

已建立表格.

SQL> desc t1
 名稱                                      空值?    類型
 ----------------------------------------- -------- ----------------------------
 COL1                                               NUMBER(38)
 COL2                                               VARCHAR2(10)  --10 byte
 COL3                                               NVARCHAR2(10) --10 char (1 char可能由多個bytes編碼而成)

SQL> create table t2(col1 int,col2 varchar2(10 char),col3 nvarchar2(10));

已建立表格.

SQL> desc t2
 名稱                                      空值?    類型
 ----------------------------------------- -------- ----------------------------
 COL1                                               NUMBER(38)
 COL2                                               VARCHAR2(10 CHAR)
 COL3                                               NVARCHAR2(10) 

SQL> insert into t1 values(1,'甲骨文','甲骨文');

已建立 1 個資料列.

SQL> commit;

確認完成.
 
SQL> select col1,dump(col1) from t1;

      COL1
----------
DUMP(COL1)
--------------------------------------------------------------------------------
         1
Typ=2 Len=2: 193,2


SQL> select col2,dump(col2) from t1;

COL2
----------
DUMP(COL2)
--------------------------------------------------------------------------------
甲骨文
Typ=1 Len=6: 165,210,176,169,164,229


SQL> select col3,dump(col3) from t1;

COL3
--------------------
DUMP(COL3)
--------------------------------------------------------------------------------
甲骨文
Typ=1 Len=6: 117,50,154,168,101,135

 
SQL> DECLARE
  2   v1 VARCHAR2(10);
  3   v2 CHAR(10);
  4  BEGIN
  5   v1 := 'A';
  6   v2 := 'A';
  7   dbms_output.put_line(v1|| '''s length is '||length(v1));
  8   dbms_output.put_Line(v2||q'!'s length is !'||length(v2));
  9  END;
 10  /
A's length is 1
A         's length is 10
 ---------
 9個空白
 
已順利完成 PL/SQL 程序.


--請注意SQL Data Type與PL/SQL Data Type的差異
--BOOLEAN為PL/SQL Data Type,不能用在SQL Statement裡
Data Type Maximum Size in PL/SQL	Maximum Size in SQL 
CHAR                32,767 bytes         2,000 bytes
NCHAR               32,767 bytes         2,000 bytes
RAW                 32,767 bytes         2,000 bytes
VARCHAR2            32,767 bytes         4,000 bytes  --11g(12c:32,767 bytes)
NVARCHAR            32,767 bytes         4,000 bytes
LONG                32,760 bytes         2 gigabytes (GB) - 1
BLOB           128 terabytes (TB)        (4 GB - 1) * database_block_size
CLOB                      128 TB         (4 GB - 1) * database_block_size
NCLOB                     128 TB         (4 GB - 1) * database_block_size

The PL/SQL data types PLS_INTEGER and BINARY_INTEGER are identical. For simplicity, 
this document uses PLS_INTEGER to mean both PLS_INTEGER and BINARY_INTEGER.
The PLS_INTEGER data type stores signed integers in the range -2,147,483,648 through 2,147,483,647, represented in 32 bits.
The PLS_INTEGER data type has these advantages over the NUMBER data type and NUMBER subtypes:
PLS_INTEGER values require less storage.  --NUMBER最多需要22 Bytes的儲存空間
PLS_INTEGER operations use hardware arithmetic, so they are faster than NUMBER operations, which use library arithmetic.
For efficiency, use PLS_INTEGER values for all calculations in its range.

SQL> CREATE OR REPLACE FUNCTION char_len(p_1 VARCHAR2) RETURN VARCHAR2
  2  IS
  3   v_1 VARCHAR2(10000);
  4  BEGIN
  5   v_1 := rpad(p_1,10000,'x');
  6   RETURN v_1;
  7  END;
  8  /

已建立函數.

SQL> SELECT char_len('A') FROM dual;
SELECT char_len('A') FROM dual
       *
 ERROR 在行 1:
ORA-06502: PL/SQL: 數字或值錯誤: 字元字串緩衝區太小
ORA-06512: 在 "HR.CHAR_LEN", line 6


SQL> DECLARE
  2   v_1 VARCHAR2(20000);
  3  BEGIN
  4   v_1 := char_len('A');
  5   DBMS_OUTPUT.PUT_LINE(LENGTH(v_1));
  6  END;
  7  /
10000

已順利完成 PL/SQL 程序.

SQL> CREATE OR REPLACE FUNCTION char_len(p_1 VARCHAR2) RETURN VARCHAR2
  2  IS
  3   v_1 VARCHAR2(4000);
  4  BEGIN
  5   v_1 := rpad(p_1,4000,'x');
  6   RETURN v_1;
  7  END;
  8  /

已建立函數.

SQL> SELECT char_len('A') FROM dual;

CHAR_LEN('A')
--------------------------------------------------------------------------------
Axxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

--在撰寫stored function時,如果回傳的資料為文字型態,請注意其長度.SQL最大只能接受4000 bytes.

SQL> DECLARE
  2    p1 PLS_INTEGER := 2147483647;  --PLS_INTEGER 正整數的最大值
  3    p2 PLS_INTEGER := 1;
  4    n NUMBER;
  5  BEGIN
  6    n := p1 + p2;  --p1+p2的結果指派給n-> p1+p2的結果其資料型態為pls_integer.但此次操作已經超過pls_integer的上限範圍
  7  END;
  8  /
DECLARE
*
 ERROR 在行 1:
ORA-01426: 數值發生上限溢位  --此處錯誤出現在p1+p2的結果,不是n的問題
ORA-06512: 在 line 6

SQL> DECLARE
  2    p1 PLS_INTEGER := 2147483647;
  3    p2 INTEGER := 1;  --INTEGER = NUMBER(38,0)
  4    n NUMBER;
  5  BEGIN
  6    n := p1 + p2;  --p1+p2其結果為INTEGER=NUMBER(38,0),因此p1將先轉換為NUMBER,然後才與p2相加.所以所得出的結果也是NUMBER型態,因此可以超過2147483647的限制.
  7    dbms_output.put_line(n);
  8  END;
  9  /
2147483648

已順利完成 PL/SQL 程序.

SQL> DECLARE
  2    n PLS_INTEGER := 2147483645;
  3  BEGIN
  4    FOR j IN 1..4 LOOP
  5      n := n + 1;
  6      DBMS_OUTPUT.PUT_LINE(TO_CHAR(n, 'S9999999999'));
  7    END LOOP;
  8    FOR j IN 1..4 LOOP
  9     n := n - 1;
 10     DBMS_OUTPUT.PUT_LINE(TO_CHAR(n, 'S9999999999'));
 11    END LOOP;
 12  END;
 13  /
+2147483646
+2147483647
DECLARE
*
 ERROR 在行 1:
ORA-01426: 數值發生上限溢位
ORA-06512: 在 line 5

SIMPLE_INTEGER(11g)
SIMPLE_INTEGER is a predefined subtype of the PLS_INTEGER data type that has the same range as PLS_INTEGER and has a NOT NULL constraint.
It differs significantly from PLS_INTEGER in its overflow semantics.
SQL> DECLARE
  2   v1 SIMPLE_INTEGER;
  3  BEGIN
  4   v1 := 1;
  5  END;
  6  /
 v1 SIMPLE_INTEGER;
    *
 ERROR 在行 2:
ORA-06550: 第 2 行, 第 5 個欄位:
PLS-00218: 宣告為 NOT NULL 的變數必須要有初始化指定(暗示simple_integer的資料型態有NOT NULL限制)

SQL> DECLARE
  2    n SIMPLE_INTEGER := 2147483645;
  3  BEGIN
  4    FOR j IN 1..4 LOOP
  5      n := n + 1;
  6      DBMS_OUTPUT.PUT_LINE(TO_CHAR(n, 'S9999999999'));
  7    END LOOP;
  8    FOR j IN 1..4 LOOP
  9     n := n - 1;
 10     DBMS_OUTPUT.PUT_LINE(TO_CHAR(n, 'S9999999999'));
 11    END LOOP;
 12  END;
 13  /
+2147483646
+2147483647 
-2147483648 --超過maxvalue後,變成最小值
-2147483647
-2147483648 --超過minvalue後,變成最大值
+2147483647
+2147483646
+2147483645

已順利完成 PL/SQL 程序.

DATE 世紀年月日時分秒(YYYYMMDDHH24MISS)
TIMESTAMP 世紀年月日時分秒.小數秒(max:9)
TIMESTAMP WITH TIME ZONE 世紀年月日時分秒.小數秒+時區資訊
TIMESTAMP WITH LOCAL TIME ZONE 世紀年月日時分秒.小數秒(自動轉換為SESSION TIMEZONE)

SQL> select sessiontimezone,dbtimezone from dual;

SESSIONTIMEZONE
---------------------------------------------------------------------------
DBTIME
------
+08:00  --預設以作業系統為標準
+00:00  --建立Database時決定,預設為00:00

SQL> alter session set nls_date_format='YYYY-MM-DD:HH24:MI:SS';

SQL> create table hr.t4(a number,b date,c timestamp with time zone,d timestamp with local time zone);

已建立表格.

--d欄位值將由session時區轉換為db時區後,儲存到database裡
SQL> insert into hr.t4 values(1,sysdate,systimestamp,systimestamp);

已建立 1 個資料列.

SQL> commit;

確認完成.

SQL> select * from hr.t4;

         A B
---------- -------------------
C
---------------------------------------------------------------------------
D
---------------------------------------------------------------------------
         1 2013-03-04:14:14:47
04-3月 -13 02.14.47.550000 下午 +08:00
04-3月 -13 02.14.47.550000 下午    --此欄位值自動計算db timezone與session timezone的時差

--當session time zone為'-07:00'的使用者,query hr.t4
SQL> alter session set time_zone='-07:00';

已更改階段作業.

SQL> select sessiontimezone,dbtimezone from dual;

SESSIONTIMEZONE
---------------------------------------------------------------------------
DBTIME
------
-07:00
+00:00


SQL> select * from hr.t4;

         A B
---------- -------------------
C
---------------------------------------------------------------------------
D
---------------------------------------------------------------------------
         1 2013-03-04:14:14:47
04-3月 -13 02.14.47.550000 下午 +08:00
03-3月 -13 11.14.47.550000 下午  --自動轉換時間

SQL> DECLARE
  2   v1 NUMBER;
  3   v2 VARCHAR2(10);
  4  BEGIN
  5   v1 := 1 || '2';
    --to_char(1) || '2' -> '12' -> to_number('12') assign to v1
  6   v2 := 1 + '2';
    --1 + to_number('2') -> 3 -> to_char(3) assign to v2
  7  END;
  8  /

已順利完成 PL/SQL 程序.


SQL> SELECT employee_id,last_name,salary,hire_date FROM hr.employees WHERE department_id=90;

EMPLOYEE_ID LAST_NAME                     SALARY HIRE_DATE
----------- ------------------------- ---------- -------------------
        100 King                           24000 2003-06-17:00:00:00
        101 Kochhar                        17000 2005-09-21:00:00:00
        102 De Haan                        17000 2001-01-13:00:00:00   --表示目前的NLS_DATE_FORMAT='YYYY-MM-DD:HH24:MI:SS'

--顯示目前session的NLS_DATE相關參數值
SQL> SELECT parameter,value FROM nls_session_parameters WHERE parameter LIKE 'NLS_DATE%';

PARAMETER                      VALUE
------------------------------ --------------------------------------------------
NLS_DATE_FORMAT                YYYY-MM-DD:HH24:MI:SS
NLS_DATE_LANGUAGE              AMERICAN

--修改此session的NLS_DATE_FORMAT與NLS_DATE_LANGUAGE
1.變更SESSION的相關參數
SQL> ALTER SESSION SET nls_date_format='YYYY-MM-DD:HH24:MI:SS';
SQL> ALTER SESSION SET nls_date_language=american;
	   
2.使用環境變數
C:\> set NLS_DATE_FORMAT=YYYY-MM-DD:HH24:MI:SS
C:\> set NLS_DATE_LANGUAGE=american
C:\> sqlplus hr/hr
SQL> 此時session的nls_date_format/nls_date_language為環境變數所設定

SQL> DECLARE
  2   v_hire_date DATE;
  3  BEGIN
  4   v_hire_date := '17-JUN-03';  --自動使用TO_DATE函數,將'17-JUN-03'轉換為日期.但所使用的NLS_DATE_FORMAT與NLS_DATE_LANGUAGE為session預設值
  5   v_hire_date := TO_DATE('17-JUN-03','DD-MON-RR');
  6   v_hire_date := TO_DATE('17-JUN-03','DD-MON-RR','NLS_DATE_LANGUAGE=AMERICAN');
  7  END;
  8  /

已順利完成 PL/SQL 程序.		

====================================================================================================
SQL> SELECT parameter,value FROM nls_session_parameters WHERE parameter LIKE 'NLS_DATE%';

PARAMETER                      VALUE
------------------------------ ----------------------------------------
NLS_DATE_FORMAT                DD-MON-RR
NLS_DATE_LANGUAGE              TRADITIONAL CHINESE

SQL> DECLARE
  2   v_hire_date DATE;
  3  BEGIN
  4   v_hire_date := '17-JUN-03';  --JUN應該改為6月
  5   v_hire_date := TO_DATE('17-JUN-03','DD-MON-RR');  --JUN應該改為6月
  6   v_hire_date := TO_DATE('17-JUN-03','DD-MON-RR','NLS_DATE_LANGUAGE=AMERICAN');
  7  END;
  8  /
DECLARE
*
 ERROR 在行 1:
ORA-01843: 不是有效的月份
ORA-06512: 在 line 4

SQL> DECLARE
  2   v_hire_date DATE;
  3  BEGIN
  4   v_hire_date := '17-6月-03';
  5   v_hire_date := TO_DATE('17-6月-03','DD-MON-RR');
  6   v_hire_date := TO_DATE('17-JUN-03','DD-MON-RR','NLS_DATE_LANGUAGE=AMERICAN');
  7  END;
  8  /

已順利完成 PL/SQL 程序.
====================================================================================================
--請將今天日期加上2年3個月
SQL> SELECT sysdate,sysdate+(2*365+3*30),ADD_MONTHS(sysdate,27),sysdate+INTERVAL '2-3' YEAR TO MONTH FROM dual;

SYSDATE             SYSDATE+(2*365+3*30 ADD_MONTHS(SYSDATE, SYSDATE+INTERVAL'2-
------------------- ------------------- ------------------- -------------------
2014-03-10:14:31:33 2016-06-07:14:31:33 2016-06-10:14:31:33 2016-06-10:14:31:33

--請將今天日期加上3天5小時10分20秒
SQL> SELECT sysdate,sysdate+3+(5/24)+(10/1440)+(20/86400),sysdate+INTERVAL '3 5:10:20' DAY TO SECOND FROM dual;

SYSDATE             SYSDATE+3+(5/24)+(1 SYSDATE+INTERVAL'35
------------------- ------------------- -------------------
2014-03-10:14:34:40 2014-03-13:19:45:00 2014-03-13:19:45:00

SQL> select employee_id from hr.employees where last_name='King';

EMPLOYEE_ID
-----------
        156
        100
		
SQL> DECLARE
  2   v_employee_id number;
  3  BEGIN
  4   select employee_id into v_employee_id from hr.employees where last_name='King';
  5   dbms_output.put_line('The Employee_id is '||v_employee_id);
  6  END;
  7  /
DECLARE
*
 ERROR 在行 1:
ORA-01422: 精確擷取傳回的列數超過所要求的列數  --一個變數同時間只能接受一個變數值
ORA-06512: 在 line 4
--解決方法
1.修改SQL,讓SQL結果只回傳一個變數值
2.變更variable data type,讓變數可以同時接受多個變數值
3.使用explicit cursor,控制回傳速度,一次回傳一個值.

SQL> create table hr.emp as select * from hr.employees;

已建立表格.

SQL> desc hr.emp
 名稱                                      空值?    類型
 ----------------------------------------- -------- ----------------------------
 EMPLOYEE_ID                                        NUMBER(6)
 FIRST_NAME                                         VARCHAR2(20)
 LAST_NAME                                 NOT NULL VARCHAR2(25)
 EMAIL                                     NOT NULL VARCHAR2(25)
 PHONE_NUMBER                                       VARCHAR2(20)
 HIRE_DATE                                 NOT NULL DATE
 JOB_ID                                    NOT NULL VARCHAR2(10)
 SALARY                                             NUMBER(8,2)
 COMMISSION_PCT                                     NUMBER(2,2)
 MANAGER_ID                                         NUMBER(6)
 DEPARTMENT_ID                                      NUMBER(4)

SQL> DECLARE
  2   v_last_name varchar2(25);  --與hr.emp.last_name相同資料型態與長度
  3  BEGIN
  4   select last_name into v_last_name from hr.emp where employee_id=100;
  5   dbms_output.put_line('The employee''s last name is '||v_last_name);
  6  END;
  7  /
The employee's last name is King

已順利完成 PL/SQL 程序.

--修改hr.emp.last_name的長度
SQL> alter table hr.emp modify(last_name varchar2(30));

已更改表格.

SQL> desc hr.emp
 名稱                                      空值?    類型
 ----------------------------------------- -------- ----------------------------
 EMPLOYEE_ID                                        NUMBER(6)
 FIRST_NAME                                         VARCHAR2(20)
 LAST_NAME                                 NOT NULL VARCHAR2(30)
 EMAIL                                     NOT NULL VARCHAR2(25)
 PHONE_NUMBER                                       VARCHAR2(20)
 HIRE_DATE                                 NOT NULL DATE
 JOB_ID                                    NOT NULL VARCHAR2(10)
 SALARY                                             NUMBER(8,2)
 COMMISSION_PCT                                     NUMBER(2,2)
 MANAGER_ID                                         NUMBER(6)
 DEPARTMENT_ID                                      NUMBER(4)

SQL> declare
  2   v_last_name varchar2(25);
  3  BEGIN
  4   select last_name into v_last_name from hr.emp where employee_id=100;
  5   dbms_output.put_line('The employee''s last name is '||v_last_name);
  6  END;
  7  /
The employee's last name is King

已順利完成 PL/SQL 程序.  --因為現有資料長度小於25 Bytes

--修改某筆資料的last_name,讓它的長度超過25 Bytes
SQL> update hr.emp set last_name = rpad('King',30,'A') where employee_id=100;

已更新 1 個資料列.

SQL> commit;

確認完成.

SQL> DECLARE
  2   v_last_name varchar2(25);  
  3  BEGIN
  4   select last_name into v_last_name from hr.emp where employee_id=100;
  5   dbms_output.put_line('The employee''s last name is '||v_last_name);
  6  END;
  7  /
declare
*
 ERROR 在行 1:
ORA-06502: PL/SQL: 數字或值錯誤: 字元字串緩衝區太小
ORA-06512: 在 line 4
--解決方法
1.修改v_last_name的長度.必須知道pl/sql program與table的相依性
2.修改v_last_name的宣告方法為%TYPE

SQL> DECLARE
  2   v_last_name hr.emp.last_name%TYPE;  --直接對應到column data type
  3  BEGIN
  4   select last_name into v_last_name from hr.emp where employee_id=100;
  5   dbms_output.put_line('The employee''s last name is '||v_last_name);
  6  END;
  7  /
The employee's last name is KingAAAAAAAAAAAAAAAAAAAAAAAAAA

已順利完成 PL/SQL 程序.
--%TYPE的優點,不管column data type如何變更,相對的變數型態都不會發生錯誤.

SQL> DECLARE
  2   v_b1 BOOLEAN := FALSE;  --FALSE是boolean value,不是literal,所以不用被單引號括起來
  3  BEGIN
  4   v_b1 := (1<2);  --使用算術運算式產生Boolean value
              ('A'<'B')
			  (sysdate<to_date('2013-10-13','YYYY-MM-DD'))
  5   IF v_b1
    --IF (1<2)
	     ('A'<'B')
		 (sysdate<to_date('2013-10-13','YYYY-MM-DD'))
  6    THEN
  7     dbms_output.put_line('布林值為TRUE');
  8    ELSE
  9     dbms_output.put_line('布林值為FALSE');
 10   END IF;
 11  END;
 12  /
布林值為TRUE

已順利完成 PL/SQL 程序.

SQL> DECLARE
  2   v_1 CONSTANT BOOLEAN := FALSE;
  3  BEGIN
  4   IF v_1
  5    THEN
  6      dbms_output.put_line('True');  --此行將永遠不會被執行
  7    ELSE
  8      dbms_output.put_line('False');
  9   END IF;
 10  END;
 11  /
False

已順利完成 PL/SQL 程序.

OPERATOR 
UNARY(NOT,+,-)   -> NOT TRUE/FLASE, +10(+代表為正數), -10(-代表為負數)
BINARY(+(加),-(減),*,/ ...) -> x+y ,x-y

SQL> DECLARE
  2   TYPE emp_type IS RECORD     --emp_type為composite type,由兩個field(empid,ename)
  3    (empid NUMBER,
  4     ename VARCHAR2(25));
  5   emp_rec emp_type;
  6  BEGIN
  7   SELECT employee_id,last_name INTO emp_rec
  8    FROM hr.employees
  9    WHERE salary>20000;
 10   dbms_output.put_line(emp_rec.empid||':'||emp_rec.ename);
 11  END;
 12  /
100:King

已順利完成 PL/SQL 程序.



PL/SQL record=>只能儲存一組紀錄,但此組紀錄,可以由多個field組成
PL/SQL collection=>可以儲存多組紀錄,但每筆記錄只能由一個field組成.(請注意field的資料型態不受限制,可為scalar/composite)

SQL> DECLARE
  2   v_salary number;
  3  BEGIN
  4   select salary into v_salary from hr.emp where employee_id=178;
  5  END;
  6  /

已順利完成 PL/SQL 程序.

SQL> select first_name,last_name,salary from hr.emp where salary=v_salary;
select first_name,last_name,salary from hr.emp where salary=v_salary
                                                            *
 ERROR 在行 1:
ORA-00904: "V_SALARY": 無效的 ID   --->v_salary已經隨著pl/sql block結束而被消滅

--宣告變數在SQLPLUS環境裡,所以變數的生命週期長達與SQLPLUS環境相同.
SQL> VARIABLE g_salary NUMBER;
SQL> PRINT g_salary

G_SALARY
----------

SQL> BEGIN
  2   :g_salary := 1000;   --在SQL或PL/SQL裡使用bind varable,必須在變數名稱前面加上:,以表示呼叫bind variable
  3  END;
  4  /

已順利完成 PL/SQL 程序.

SQL> print :g_salary

  G_SALARY
----------
      1000

SQL> BEGIN
  2   select salary into :g_salary from hr.emp where employee_id=178;
  3  END;
  4  /

已順利完成 PL/SQL 程序.

SQL> print g_salary

g_SALARY
----------
      7000

SQL> select first_name,last_name,salary from hr.emp where salary=:g_salary;

FIRST_NAME           LAST_NAME                          SALARY
-------------------- ------------------------------ ----------
Oliver               Tuvault                              7000
Sarath               Sewall                               7000
Kimberely            Grant                                7000

bind varable(host variable)的生命週期為sqlplus環境

SQL> variable
變數   g_salary
資料類型   NUMBER
SQL> exit  --結束目前的SQLPLUS環境,宣告在SQLPLUS環境的變數也一同被消滅.

C:\>sqlplus hr/hr

SQL> select first_name,last_name,salary from hr.emp where salary=:g_salary;
SP2-0552: 未宣告連結變數 "G_SALARY".
SQL> variable
SP2-0568: 沒有宣告任何的連結變數.


--在PL/SQL環境下,如何達到全域變數的功能
1.Database Level(將資料儲存在table裡)
2.Session Level
 SQLPLUS/SQL Developer=> Host Variable
 一般環境=> 使用PACKAGE宣告public variable


SQL> variable g_salary number;
SQL> set autoprint on
SQL> declare
  2   empno integer(6) := &empno;
  3  begin
  4   select salary into :emp_salary from hr.emp where employee_id=empno;
  5  end;
  6  /
輸入 empno 的值:  100
舊的    2:  empno integer(6) := &empno;
新的    2:  empno integer(6) := 100;

已順利完成 PL/SQL 程序.

--&empno的置換發生在SQLPLUS環境裡,
--所以送到oracle server端執行的PL/SQL Block內容為
declare
 empno integer(6) := 100;
begin
 select salary into :emp_salary from hr.emp where employee_id=empno;
end;
---------------------------------------------------------------------
--bind variable則存在於session level

EMP_SALARY
----------
     24000

SQL> list
  1  declare
  2   empno integer(6) := &empno;
  3  begin
  4   select salary into :emp_salary from hr.emp where employee_id=empno;
  5* end;
SQL> /
輸入 empno 的值:  200
舊的    2:  empno integer(6) := &empno;
新的    2:  empno integer(6) := 200;
--所以送到oracle server端執行的PL/SQL Block內容為
declare
 empno integer(6) := 200;
begin
 select salary into :emp_salary from hr.emp where employee_id=empno;
end;
---------------------------------------------------------------------

已順利完成 PL/SQL 程序.


EMP_SALARY
----------
      4400

SQL> l
  1  declare
  2   empno integer(6) := &empno;
  3  begin
  4   select salary into :emp_salary from hr.emp where employee_id=empno;
  5* end;
SQL> /
輸入 empno 的值:  300
舊的    2:  empno integer(6) := &empno;
新的    2:  empno integer(6) := 300;
--所以送到oracle server端執行的PL/SQL Block內容為
declare
 empno integer(6) := 300;
begin
 select salary into :emp_salary from hr.emp where employee_id=empno;
end;
---------------------------------------------------------------------
declare
*
 ERROR 在行 1:
ORA-01403: 找不到資料
ORA-06512: 在 line 4



EMP_SALARY
----------
      4400